class Section

	values
		public INIT_AT_ZERO = 0;

	types
		public String = seq1 of char;
		public RealNumber = real;
		public SectionSectors = set of Sector;
		public SectionPointsOfInterest = set of PointOfInterest;
		public MapTeamsStats = map Team to Stat;

	instance variables
		public startLocation: String;
		public endLocation: String;
		public distance: RealNumber := INIT_AT_ZERO;
		public sectors: SectionSectors := {};
		public pointsOfInterest: SectionPointsOfInterest := {};
		public teamsStats: MapTeamsStats := {|->};
		
	operations
		public Section(sL: String, eL: String, d: RealNumber) res: Section == (
			startLocation := sL;
			endLocation := eL;
			distance := d;
		)
		pre d > 0
		post res.startLocation = sL and res.endLocation = eL and res.distance = d;
		
		public addPointOfInterest(p: PointOfInterest) == (
			pointsOfInterest := pointsOfInterest union {p};
		)
		pre p.kilometre < distance and p not in set pointsOfInterest 
		post p in set pointsOfInterest;
		
		public removePointOfInterest(p: PointOfInterest) == (
	 		pointsOfInterest := pointsOfInterest \ {p};
	 	)
	 	pre p in set pointsOfInterest
	 	post p not in set pointsOfInterest;
	 	
	 	public addSector(s: Sector) == (
			sectors := sectors union {s};
		)
		pre s not in set sectors and sumSectorsDistances(sectors)+s.distance <= distance
		post s in set sectors;
		
		public removeSector(s: Sector) == (
	 		sectors := sectors \ {s};
	 	)
	 	pre s in set sectors
	 	post s not in set sectors;
	 	
	 	public sumDistances() == (
	 		for all s in set sectors do
	 			distance := distance + s.distance;
	 	)
	 	pre distance = 0
	 	post distance >= 0;
	 	
	 	public addTeamRecord(team: Team, time: RealNumber)== (
			teamsStats := teamsStats munion {team |-> new Stat(time, distance)};
		)
		pre time > 0
		post team in set dom teamsStats;
	 	
	functions 	
	 	private sumSectorsDistances(sectors: SectionSectors) res:RealNumber ==(
	 		if sectors = {} then 0 else
	 			let s in set sectors in s.distance + sumSectorsDistances(sectors \ {s}))
	 			
end Section