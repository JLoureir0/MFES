class Day

	values
		public INIT_AT_ZERO = 0;

	types
		public DaySections = seq1 of Section;
		public DayParticipants = set1 of Team;
		public RealNumber = real;
		public MapTeamsStats = map Team to Stat;

	instance variables
		public sections: DaySections;
		public teams: DayParticipants;
		public teamsStats: MapTeamsStats := {|->};
		public totalDistance : RealNumber := INIT_AT_ZERO;

	operations
		public Day: DaySections * DayParticipants ==> Day
			Day(s, t) == (
				sections := s;
				teams := t;
				sumSectionsDistances();
				return self;
		)
		pre len s > 0 and card t > 1
		post self.sections = s and self.teams = t;
		
		public sumSectionsDistances: () ==> ()
			sumSectionsDistances() == (
				for s in sections do
					(
						s.sumDistances();
						totalDistance := totalDistance + s.distance;
					);
			);
		
		public addTeamRecord: Team * RealNumber ==> () 
			addTeamRecord(team, time) == (
				teamsStats := teamsStats munion {team |-> new Stat(time, totalDistance)};
			)
		pre time > 0 and team in set teams
		post team in set dom teamsStats;
		
		--Updates days stats through all sections
		public getTeamsRecords: () ==> ()
			getTeamsRecords() == (
				for s in sections do
					(
						s.getTeamsRecords();
						for all t in set dom s.teamsStats do
							(
							if(t in set dom teamsStats)
								then teamsStats(t).updateStat(s.teamsStats(t).time, s.teamsStats(t).distance)
							else teamsStats := teamsStats munion {t |-> s.teamsStats(t)};
							)
					)
			);
	
end Day