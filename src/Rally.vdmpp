class Rally

	values
		public INIT_AT_ZERO = 0;

	types
		public String = seq1 of char;
		public RealNumber = real;
		public RallyCategory = Type`RallyType;
		public RallyDays = seq1 of Day;
		public RallyParticipants = set1 of Team;
		public RallyWinner = Team;
		public RallyTeamSections = map Team to seq of Section;
		public MapTeamsStats = map Team to Stat;
		public Date ::	year : nat1
										month: nat1
										day: nat1;

	instance variables
	
		public category: RallyCategory;
		public local: String;
		public days: RallyDays;
		public participants: RallyParticipants;
		public totalDistance : RealNumber := INIT_AT_ZERO;
		public winner: RallyWinner;
		public teamSections: RallyTeamSections := {|->};
		public teamsStats: MapTeamsStats := {|->};
		public startDate: Date;
		public endDate: Date;
		
	operations

		public Rally: RallyCategory * String * RallyDays * RallyParticipants * Date * Date ==> Rally 
			Rally(c, l, d, p, sd, ed) == (
				category := c;
				local := l;
				days := d;
				participants := p;
				startDate := sd;
				endDate := ed;
				sumDaysDistances();
				return self;
			)
		pre len d > 0 and card p > 1 and ed.day > sd.day
		post self.category = c and self.local = l and self.days = d and self.participants = p and self.startDate = sd and self.endDate = ed ;
		
		public assignWinner: Team ==> ()
			assignWinner(w) == (
				winner := w;
			)
		pre w in set participants  
		post winner = w;
		
		public mapTeamSections: () ==> () 
			mapTeamSections() == (
				for d in days do
					for all t in set d.teams do
						(
						if(t in set dom teamSections)
							then teamSections(t) := teamSections(t) ^ d.sections
						else teamSections := teamSections munion {t |-> d.sections};
						)
			);
		
		public sumDaysDistances: () ==> ()
			sumDaysDistances() == (
				for d in days do
						totalDistance := totalDistance + d.totalDistance;
			);
		
		public addTeamRecord: Team * RealNumber ==> () 
			addTeamRecord(team, time) == (
				teamsStats := teamsStats munion {team |-> new Stat(time, totalDistance)};
			)
		pre time > 0 and team in set participants
		post team in set dom teamsStats;
		
		--Updates rally stats through all days
		public getTeamsRecords: () ==> ()
			getTeamsRecords() == (
				for d in days do
					(
						d.getTeamsRecords();
						for all t in set dom d.teamsStats do
							(
							if(t in set dom teamsStats)
								then teamsStats(t).updateStat(d.teamsStats(t).time, d.teamsStats(t).distance)
							else teamsStats := teamsStats munion {t |-> d.teamsStats(t)};
							)
					)
			);
			
			public calculateWinner: () ==> ()
			calculateWinner() == (
				(
					--other way to do this
					dcl bestTime: RealNumber := 9999999;
					
					for all t in set dom teamsStats do
						(
							--ensures that the winner ran all the competition
							if(floor teamsStats(t).distance = floor totalDistance) then
							(
								if(teamsStats(t).time < bestTime) then
								(
									bestTime := teamsStats(t).time;
									assignWinner(t);
								)
							)
								
						)
				)
			);
	
end Rally