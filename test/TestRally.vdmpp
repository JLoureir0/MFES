class TestRally is subclass of TestSuite
	
	operations
	
  	public testConstructor: () ==> ()
	  	testConstructor() == (
  	
	  		IO`println("\t\t test constructor");
	  		
	  		(
	  			dcl s1: Section := new Section("Venezia", "Bologna", 248.41);
					dcl s2: Section := new Section("Milano", "Verona", 175.32);
					
					dcl sections: seq of Section := [s1, s2];
					
					dcl p1: Pilot := new Pilot("Sébastien", "Loeb", 43, <Male>, <Pilot>);
					dcl cp1: Pilot := new Pilot("Daniel", "Elena", 45, <Male>, <CoPilot>);
					dcl c1: Car := new Car("Ford", 1271.71, 2.5, 275.5);
					dcl t1: Team := new Team("M-Sport World Rally Team", p1, cp1, c1);
					
					dcl p2: Pilot := new Pilot("Sébastien", "Ogier", 34, <Male>, <Pilot>);
					dcl cp2: Pilot := new Pilot("Julien", "Ingrassia", 38, <Male>, <CoPilot>);
					dcl c2: Car := new Car("Volkswagen", 1200, 3.5, 250);
					dcl t2: Team := new Team("M-Sport World Rally Team", p2, cp2, c2);
					
					dcl participants: set of Team := {t1, t2};
					
					dcl dayDate : Type`Date := mk_Type`Date(2017, 10, 23);
					dcl startDate : Type`Date := mk_Type`Date(2017, 10, 23);
					dcl endDate : Type`Date := mk_Type`Date(2017, 10, 24);
					
					dcl d1: Day := new Day(sections, participants, dayDate);
					
					dcl days: seq of Day := [d1];
					
					dcl r: Rally := new Rally(<TimeTrial>, "Italy", days, participants, startDate, endDate);
					
					assertEqual(<TimeTrial>, r.category);
		  		assertEqual("Italy", r.local);
		  		assertEqual("Venezia", r.days(1).sections(1).startLocation);
		    	assertTrue(t1 in set r.participants);
		    	assertTrue(t2 in set r.participants);
	  		)
	    	
	  	);
  	
  	public testMapTeamSections: () ==> ()
	  	testMapTeamSections() == (
	  			
	  			IO`println("\t\t test map teams sections");
	  			
	  		(
	  			dcl s1: Section := new Section("Venezia", "Bologna", 248.41);
					dcl s2: Section := new Section("Milano", "Verona", 175.32);
					dcl s3: Section := new Section("Lisboa", "Porto", 300);
					dcl s4: Section := new Section("Viseu", "Porto", 120);
					
					dcl sections1: seq of Section := [s1, s2];
					dcl sections2: seq of Section := [s3, s4];
					dcl allSections: seq of Section := sections1 ^ sections2;
					
					dcl p1: Pilot := new Pilot("Sébastien", "Loeb", 43, <Male>, <Pilot>);
					dcl cp1: Pilot := new Pilot("Daniel", "Elena", 45, <Male>, <CoPilot>);
					dcl c1: Car := new Car("Ford", 1271.71, 2.5, 275.5);
					dcl t1: Team := new Team("M-Sport World Rally Team", p1, cp1, c1);
					
					dcl p2: Pilot := new Pilot("Sébastien", "Ogier", 34, <Male>, <Pilot>);
					dcl cp2: Pilot := new Pilot("Julien", "Ingrassia", 38, <Male>, <CoPilot>);
					dcl c2: Car := new Car("Volkswagen", 1200, 3.5, 250);
					dcl t2: Team := new Team("M-Sport World Rally Team", p2, cp2, c2);
					
					dcl participants: set of Team := {t1, t2};
					
					dcl day1Date : Type`Date := mk_Type`Date(2017, 10, 23);
					dcl day2Date : Type`Date := mk_Type`Date(2017, 10, 24);
					dcl startDate : Type`Date := mk_Type`Date(2017, 10, 23);
					dcl endDate : Type`Date := mk_Type`Date(2017, 10, 24);
					
					dcl d1: Day := new Day(sections1, participants, day1Date);
					dcl d2: Day := new Day(sections2, participants, day2Date);
					
					dcl days: seq of Day := [d1, d2];
					
					dcl r: Rally := new Rally(<TimeTrial>, "Italy", days, participants, startDate, endDate);
	  			
	  			r.mapTeamSections();
	  		
		  		--IO`printf("\t\t Team1 sections: %s\n", [r.teamSections(t1)]);
		  		--IO`printf("\t\t Team2 sections: %s\n", [r.teamSections(t2)]);
		  		
		  		assertEqual(allSections, r.teamSections(t1));
		  		assertEqual(allSections, r.teamSections(t2));
		  	)
		  		
	  	);
	  	
	  public testAddTeamRecord: () ==> ()
  		testAddTeamRecord() == (
  		
	  		IO`println("\t\t test add team record");
	  		
	  		(
	  			dcl p1: Pilot := new Pilot("Sébastien", "Loeb", 43, <Male>, <Pilot>);
					dcl cp1: Pilot := new Pilot("Daniel", "Elena", 45, <Male>, <CoPilot>);
					dcl c1: Car := new Car("Ford", 1271.71, 2.5, 275.5);
					dcl t1: Team := new Team("M-Sport World Rally Team", p1, cp1, c1);
					
					dcl p2: Pilot := new Pilot("Sébastien", "Ogier", 34, <Male>, <Pilot>);
					dcl cp2: Pilot := new Pilot("Julien", "Ingrassia", 38, <Male>, <CoPilot>);
					dcl c2: Car := new Car("Volkswagen", 1200, 3.5, 250);
					dcl t2: Team := new Team("M-Sport World Rally Team", p2, cp2, c2);
					
					dcl s1: Section := new Section("Venezia", "Bologna", 248.41);
					
					dcl seqSections: seq of Section := [s1];
	  			
	  			dcl participants: set of Team := {t1, t2};
	  			
	  			dcl dayDate : Type`Date := mk_Type`Date(2017, 10, 23);
					dcl startDate : Type`Date := mk_Type`Date(2017, 10, 23);
					dcl endDate : Type`Date := mk_Type`Date(2017, 10, 24);
	  			
					dcl d1: Day := new Day(seqSections, participants, dayDate);
				
					dcl days: seq of Day := [d1];
		
					dcl r: Rally := new Rally(<TimeTrial>, "Italy", days, participants, startDate, endDate);
					
					r.addTeamRecord(t1, 500); 
					r.addTeamRecord(t2, 625);	
					
					--IO`printf("\t\t Rally Stats: %s\n", [r.teamsStats]);
						
					assertTrue(t1 in set dom r.teamsStats);
					assertEqual(500, r.teamsStats(t1).time);
					assertEqual(248.41, r.teamsStats(t1).distance);
					assertEqual(248.41/500, r.teamsStats(t1).averageSpeed);
					
					assertTrue(t2 in set dom r.teamsStats);
					assertEqual(625, r.teamsStats(t2).time);
					assertEqual(248.41, r.teamsStats(t2).distance);
					assertEqual(248.41/625, r.teamsStats(t2).averageSpeed);
	  		)
		
		  );
		  
		public testGetTeamsRecords: () ==> ()
		  testGetTeamsRecords() == (
		  
		  	IO`println("\t\t test get teams records");
		  	
		  	(
		  		dcl p1: Pilot := new Pilot("Sébastien", "Loeb", 43, <Male>, <Pilot>);
					dcl cp1: Pilot := new Pilot("Daniel", "Elena", 45, <Male>, <CoPilot>);
					dcl c1: Car := new Car("Ford", 1271.71, 2.5, 275.5);
					dcl t1: Team := new Team("M-Sport World Rally Team", p1, cp1, c1);
					
					dcl p2: Pilot := new Pilot("Sébastien", "Ogier", 34, <Male>, <Pilot>);
					dcl cp2: Pilot := new Pilot("Julien", "Ingrassia", 38, <Male>, <CoPilot>);
					dcl c2: Car := new Car("Volkswagen", 1200, 3.5, 250);
					dcl t2: Team := new Team("M-Sport World Rally Team", p2, cp2, c2);
					
					dcl s1: Section := new Section("Venezia", "Bologna", 248);
					dcl s2: Section := new Section("Milano", "Verona", 187);
					
					dcl seqSections: seq of Section := [s1, s2];
	  			
	  			dcl participants: set of Team := {t1, t2};
	  			
					dcl dayDate : Type`Date := mk_Type`Date(2017, 10, 23);
					dcl startDate : Type`Date := mk_Type`Date(2017, 10, 23);
					dcl endDate : Type`Date := mk_Type`Date(2017, 10, 24);
	  			
					dcl d1: Day := new Day(seqSections, participants, dayDate);
				
					dcl days: seq of Day := [d1];
		
					dcl r: Rally := new Rally(<TimeTrial>, "Italy", days, participants, startDate, endDate);
					
					d1.addTeamRecord(t1, 500); 
					d1.addTeamRecord(t2, 625);	
					
					r.getTeamsRecords();
					
					--IO`printf("\t\t Rally Stats: %s\n", [r.teamsStats]);
						
					assertTrue(t1 in set dom r.teamsStats);
					assertEqual(500, r.teamsStats(t1).time);
					assertEqual(435, r.teamsStats(t1).distance);
					assertEqual(435/500, r.teamsStats(t1).averageSpeed);
					
					assertTrue(t2 in set dom r.teamsStats);
					assertEqual(625, r.teamsStats(t2).time);
					assertEqual(435, r.teamsStats(t2).distance);
					assertEqual(435/625, r.teamsStats(t2).averageSpeed);
		  	)
		  	
		  );
		  
		public testSimulateRally: () ==> ()
		  testSimulateRally() == (
		  
		  	IO`println("\t\t test simulate rally");
		  	
		  	(
		  	--Sections and Sectors
		  		dcl day1Section1: Section := new Section("Lousada", "Viana Castelo", 30.06);
		  		
		  			dcl day1Section1Sector1: Sector := new Sector("Lousada", 3.36);
		  			dcl day1Section1Sector2: Sector := new Sector("Viana Castelo", 26.70);
		  		
		  		dcl day1Section2: Section := new Section("Viana Castelo", "Braga", 23.89);
		  		
		  			dcl day1Section2Sector1: Sector := new Sector("Caminha", 18.10);
		  			dcl day1Section2Sector2: Sector := new Sector("Braga", 5.78);
		  			
		  		dcl day2Section1: Section := new Section("Vieira Minho", "Amarante", 77.28);
		  		
		  			dcl day2Section1Sector1: Sector := new Sector("Vieira Minho", 17.43);
		  			dcl day2Section1Sector2: Sector := new Sector("Cabeceiras Basto", 22.30);
		  			dcl day2Section1Sector3: Sector := new Sector("Amarante", 37.55);
		  			
		  		dcl day3Section1: Section := new Section("Fafe", "Luílhas", 23.09);
		  		
		  			dcl day3Section1Sector1: Sector := new Sector("Fafe", 11.18);
		  			dcl day3Section1Sector2: Sector := new Sector("Luílhas", 11.91);
		  		
		  		dcl day3Section2: Section := new Section("Montim", "Fafe", 19.84);
		  		
		  			dcl day3Section2Sector1: Sector := new Sector("Montim", 8.66);
		  			dcl day3Section2Sector2: Sector := new Sector("Fafe", 11.18);
		  			
		  		dcl day1Sections: seq of Section := [day1Section1, day1Section2];
		  		dcl day2Sections: seq of Section := [day2Section1];
		  		dcl day3Sections: seq of Section := [day3Section1, day3Section2];
		  		
		  	--Teams
		  		dcl p1: Pilot := new Pilot("Sébastien", "Loeb", 43, <Male>, <Pilot>);
					dcl cp1: Pilot := new Pilot("Daniel", "Elena", 45, <Male>, <CoPilot>);
					dcl c1: Car := new Car("Citroen DS3", 1200, 3.1, 250);
					dcl s1: Sponsor := new Sponsor("Michelin");
					dcl t1: Team := new Team("M-Sport World Rally Team", p1, cp1, c1);
					
					dcl p2: Pilot := new Pilot("Colin", "McRae", 34, <Male>, <Pilot>);
					dcl cp2: Pilot := new Pilot("Nicky", "Grist", 38, <Male>, <CoPilot>);
					dcl c2: Car := new Car("Subaru Impreza", 1378, 2.9, 280);
					dcl s2: Sponsor := new Sponsor("RedBull");
					dcl t2: Team := new Team("Subaru World", p2, cp2, c2);
					
					dcl p3: Pilot := new Pilot("Armindo", "Araújo", 40, <Male>, <Pilot>);
					dcl cp3: Pilot := new Pilot("Miguel", "Ramalho", 42, <Male>, <CoPilot>);
					dcl c3: Car := new Car("Mini Countryman", 1305, 3.4, 250);
					dcl s3: Sponsor := new Sponsor("Marlboro");
					dcl t3: Team := new Team("MotorSport Italia", p3, cp3, c3);
					
					dcl p4: Pilot := new Pilot("Carlos", "Sainz", 41, <Male>, <Pilot>);
					dcl cp4: Pilot := new Pilot("Luis", "Moya", 38, <Male>, <CoPilot>);
					dcl c4: Car := new Car("Toyota Corolla", 1345, 3.2, 270);
					dcl s4: Sponsor := new Sponsor("McDonalds");
					dcl t4: Team := new Team("Corolla World", p4, cp4, c4);
					
					dcl participants: set of Team := {t1, t2, t3, t4};
					
				--Days
					dcl day1Date : Type`Date := mk_Type`Date(2017, 10, 23);
					dcl day2Date : Type`Date := mk_Type`Date(2017, 10, 24);
					dcl day3Date : Type`Date := mk_Type`Date(2017, 10, 25);
					
					dcl day1: Day := new Day(day1Sections, participants, day1Date);
		  		dcl day2: Day := new Day(day2Sections, participants, day2Date);
		  		dcl day3: Day := new Day(day3Sections, participants, day3Date);
				
					dcl days: seq of Day := [day1, day2, day3];
					
				--Rally
					dcl startDate : Type`Date := mk_Type`Date(2017, 10, 23);
					dcl endDate : Type`Date := mk_Type`Date(2017, 10, 25);
					dcl rally: Rally := new Rally(<TimeTrial>, "Portugal", days, participants, startDate, endDate);
					
				--Add sponsors to Teams
					t1.addSponsor(s1);
					t2.addSponsor(s2);
					t3.addSponsor(s3);
					t4.addSponsor(s4);
					
				--Add Sectors to Sections
					day1Section1.addSector(day1Section1Sector1);
					day1Section1.addSector(day1Section1Sector2);
					
					day1Section2.addSector(day1Section2Sector1);
					day1Section2.addSector(day1Section2Sector2);
					
					day2Section1.addSector(day2Section1Sector1);
					day2Section1.addSector(day2Section1Sector2);
					day2Section1.addSector(day2Section1Sector3);
					
					day3Section1.addSector(day3Section1Sector1);
					day3Section1.addSector(day3Section1Sector2);
					
					day3Section2.addSector(day3Section2Sector1);
					day3Section2.addSector(day3Section2Sector2);
					
					--IO`printf("\t\t day1: %s \n", [rally.days(1).sections]);
					--IO`printf("\t\t day1: %s \n", [rally.days(2).sections]);
					--IO`printf("\t\t day1: %s \n", [rally.days(3).sections]);
					
				--Add Team Records to Sectors
					day1Section1Sector1.addTeamRecord(t1, 156);
					day1Section1Sector1.addTeamRecord(t2, 153);
					day1Section1Sector1.addTeamRecord(t3, 162);
					day1Section1Sector1.addTeamRecord(t4, 165);
					
					day1Section1Sector2.addTeamRecord(t1, 944);
					day1Section1Sector2.addTeamRecord(t2, 947);
					day1Section1Sector2.addTeamRecord(t3, 940);
					day1Section1Sector2.addTeamRecord(t4, 943);
					
					day1Section2Sector1.addTeamRecord(t1, 625);
					day1Section2Sector1.addTeamRecord(t2, 632);
					day1Section2Sector1.addTeamRecord(t3, 623);
					day1Section2Sector1.addTeamRecord(t4, 621);
					
					day1Section2Sector2.addTeamRecord(t1, 243);
					day1Section2Sector2.addTeamRecord(t2, 237);
					day1Section2Sector2.addTeamRecord(t3, 239);
					day1Section2Sector2.addTeamRecord(t4, 246);
					
					day2Section1Sector1.addTeamRecord(t1, 646);
					day2Section1Sector1.addTeamRecord(t2, 643);
					day2Section1Sector1.addTeamRecord(t3, 637);
					day2Section1Sector1.addTeamRecord(t4, 640);
					
					day2Section1Sector2.addTeamRecord(t1, 812);
					day2Section1Sector2.addTeamRecord(t2, 815);
					day2Section1Sector2.addTeamRecord(t3, 813);
					day2Section1Sector2.addTeamRecord(t4, 819);
					
					day2Section1Sector3.addTeamRecord(t1, 1473);
					day2Section1Sector3.addTeamRecord(t2, 1484);
					day2Section1Sector3.addTeamRecord(t3, 1479);
					day2Section1Sector3.addTeamRecord(t4, 1476);
					
					day3Section1Sector1.addTeamRecord(t1, 399);
					day3Section1Sector1.addTeamRecord(t2, 395);
					day3Section1Sector1.addTeamRecord(t3, 390);
					day3Section1Sector1.addTeamRecord(t4, 402);
					
					day3Section1Sector2.addTeamRecord(t1, 489);
					day3Section1Sector2.addTeamRecord(t2, 492);
					day3Section1Sector2.addTeamRecord(t3, 477);
					day3Section1Sector2.addTeamRecord(t4, 485);
					
					day3Section2Sector1.addTeamRecord(t1, 351);
					day3Section2Sector1.addTeamRecord(t2, 347);
					day3Section2Sector1.addTeamRecord(t3, 342);
					day3Section2Sector1.addTeamRecord(t4, 356);
					
					day3Section2Sector2.addTeamRecord(t1, 404);
					day3Section2Sector2.addTeamRecord(t2, 398);
					day3Section2Sector2.addTeamRecord(t3, 400);
					day3Section2Sector2.addTeamRecord(t4, 402);
		  		
		  		rally.getTeamsRecords();
		  		
		  		IO`println("\t\t rally stats:");
		  		
		  		for all t in set dom rally.teamsStats do
		  		(
		  			IO`printf("\t\t %s", [t.name]);
		  			IO`printf(" %s\n", [rally.teamsStats(t)]);
		  		);
		  		
		  		rally.calculateWinner();
		  		
		  		IO`printf("\t\t Congratulations Team %s! You won the Rally de Portugal!\n", [rally.winner.name]);
		  			
		  	)
		  	
		  );

  	public testAll: () ==> ()
	  	testAll() == (
	    	IO`println("\t rally tests");
	    	testConstructor();
	    	testMapTeamSections();
	    	testAddTeamRecord();
	    	testGetTeamsRecords();
	    	testSimulateRally();
	  	);

end TestRally